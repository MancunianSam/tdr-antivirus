library("tdr-jenkinslib")

def versionTag = "v${env.BUILD_NUMBER}"
def repo = "tdr-antivirus"

pipeline {
  agent {
    label "master"
  }
  parameters {
    text(name: "BUILD_IMAGE_TAG", defaultValue: "latest", description: "The image tag for the base yara images")
  }
  stages {
    stage("Run git secrets") {
      steps {
        script {
          tdr.runGitSecrets(repo)
        }
      }
    }
    stage('Run tests') {
      agent {
        ecs {
          inheritFrom "aws"
          taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRJenkinsNodeLambdaRoleIntg"
        }
      }
      steps {
        script {
          sh "pip install -r requirements.txt"
          sh "python -m pytest"
        }
      }
    }

    stage("Deploy to integration") {
      when {
        expression { env.BRANCH_NAME == "master"}
      }

      stages {
        stage("Build zip file") {
          steps {
            script {
              sh "aws ecr get-login --region eu-west-2 --no-include-email | bash"
              sh "docker stop dependencies | true"
              sh "docker stop rules | true"
              sh "rm -rf lambda"
              sh "docker run -itd --rm --name dependencies ${env.MANAGEMENT_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/yara-dependencies:${BUILD_IMAGE_TAG}"
              sh "docker cp dependencies:/lambda/dependencies.zip ."
              sh "docker run -itd --rm --name rules ${env.MANAGEMENT_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/yara-rules:${BUILD_IMAGE_TAG}"
              sh "mkdir lambda"
              sh "docker cp rules:/rules/output ./lambda"
              sh "unzip -q dependencies.zip -d ./lambda"
              sh "cp src/matcher.py ./lambda"
              dir("lambda") {
                sh "zip -r9 function.zip ."
                stash includes: "function.zip", name: "function.zip"
              }
            }
          }
        }
        stage("Upload function") {
          agent {
            ecs {
              inheritFrom "aws"
              taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRJenkinsNodeLambdaRoleIntg"
            }
          }
          steps {
            script {
              unstash "function.zip"
              //I know it's not a jar, the deploy jenkinslib function needs changing to take a name which is another ticket.
              sh "aws s3 cp function.zip s3://tdr-backend-code-mgmt/${versionTag}/yara-av.jar"

              tdr.configureJenkinsGitUser()

              sh "git tag ${versionTag}"
              sh "git checkout ${env.BRANCH_NAME}"

              tdr.pushGitHubBranch(env.BRANCH_NAME)

              build(
                  job: "TDR Antivirus Deploy",
                  parameters: [
                      string(name: "STAGE", value: "intg"),
                      string(name: "TO_DEPLOY", value: versionTag)
                  ],
                  wait: false)
            }
          }
        }
      }
    }
  }
  post {
    failure {
      script {
        tdr.reportFailedBuildToGitHub(repo, env.GIT_COMMIT)
      }
    }
    success {
      script {
        tdr.reportSuccessfulBuildToGitHub(repo, env.GIT_COMMIT)
      }
    }
  }
}
